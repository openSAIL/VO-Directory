/*
 * File: app/view/LoginContainer.js
 * Date: Wed Mar 04 2015 20:10:16 GMT-0500 (EST)
 *
 * This file was generated by Ext Designer version 1.2.3.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('PublishingWizard.LoginContainer', {
    extend: 'PublishingWizard.ui.LoginContainer',
    renderTo: 'loginDiv',

    requires: [
        'Ext.window.MessageBox'
    ],

    initComponent: function () {
        this.callParent(arguments);

        // Hang on to references to open Windows
        this.loginWindow = null;
        this.accountWindow = null;
        this.loginTimer = null;

        // Get Buttons and wire up Event Handlers
        this.loginButton = this.getComponent('itemLoginButton');
        this.loginButton.on('click', this.onLoginButtonClick, this);

        this.accountButton = this.getComponent('itemAccountButton');
        this.accountButton.on('click', this.onAccountButtonClick, this);

        // Perform initial request to see if we are logged in
        this.updateContainer(false, false, "...");
        this.polling = false;
        this.getWhoami(10);
    },

    statics: {
        whoamiUrl: "../publishing/WhoAmI.asmx/whoami",
        loginUrl: "../Login/login.html",
        accountUrl: "http://archive.stsci.edu/registration",
        loginTimeoutMins: 2,
        login: false,
        loginFirstName: null,
        loginLastName: null,
        loginEmail: null,
        loginId: null,
    },

    ///////////////
    // getWhoami()
    ///////////////   
    getWhoami: function (delay) {
        this.whoamiTask = new Ext.util.DelayedTask(function () {
            var url = PublishingWizard.LoginContainer.whoamiUrl;
            Ext.log('LoginContainer: getWhoami() invoking url: ' + url);
            Ext.Ajax.request({
                url: url,
                method: 'GET',
                success: this.onWhoamiSuccess,
                failure: this.onWhoamiFailure,
                scope: this
            });
        }, this);

        this.whoamiTask.delay(delay);
    },

    onWhoamiSuccess: function (response) {

        // Expecting whoami json object: 
        // {"FirstName":"", "LastName":"", "EZID":"", "Email":""}
        if (this.isValidResponse(response)) {
            var whoami = Ext.decode(response.responseText);
            if (whoami != null && whoami.EZID && whoami.EZID.trim().toLowerCase() != "anonymous") {
                Ext.log('LoginContainer: onWhoamiSuccess() EZID : ' + whoami.EZID);
                this.updateContainer(true, false, whoami.LastName, whoami.Email);
                PublishingWizard.LoginContainer.loginFirstName = whoami.FirstName;
                PublishingWizard.LoginContainer.loginLastName = whoami.LastName;
                PublishingWizard.LoginContainer.loginEmail = whoami.Email;
                PublishingWizard.LoginContainer.loginId = whoami.EZID.trim();

                // Successful login. Now poll the server to detect user session expire
                Ext.log('LoginContainer: onWhoamiSuccess() valid response EZID: ' + whoami.EZID + ' - polling (30)');
                this.polling = true;
                this.getWhoami(1000 * 30);
            } else {
                Ext.log('LoginContainer: onWhoamiSuccess() valid response EZID: anonymous - stop polling.');
                this.polling = false;
                this.updateContainer(false, true, "anonymous");
            }
        } else {
            // If polling, just quietly submit another poll to see if network/server recovered 
            // Otherwise, this is user initiated login attempt: show Login Failure Dialog and log the error
            if (this.polling) {
                Ext.log('LoginContainer: onWhoamiSuccess() empty response - polling (30)');
                this.getWhoami(1000 * 30);
            } else {
                this.updateContainer(false, true, "anonymous");
                this.showLoginUnavailable('Login failed. If the problem continues please contact archive[at]stsci.edu');
                var message = 'LoginContainer::onWhoamiSuccess() Invalid json. responseText: ' + (response ? response.responseText : "null");
                Ext.log(message);
            }
        }
    },

    onWhoamiFailure: function (response) {
        // If polling, just quietly submit another poll to see if network/server is available
        // Otherwise, this is user initiated login attempt: show Login Failure Dialog and log the error
        if (this.polling) {
            Ext.log('LoginContainer: onWhoamiFailure() network error - polling (30)');
            this.getWhoami(1000 * 30);
        } else {
            this.updateContainer(false, true, "anonymous");
            this.showLoginUnavailable('Login failed. If the problem continues, please contact archive[at]stsci.edu');
            // Log error message on client and server
            var message = 'LoginContainer::onWhoamiFailure() responseText: ' + (response ? response.responseText : "null")
            Ext.log(message);
        }
    },

    isValidResponse: function (response) {
        var valid = false;
        if (response && response.responseText) {
            var text = response.responseText.trim();
            valid = (text.startsWith("{") &&
			         text.endsWith("}") &&
			         text.indexOf("EZID") > 0 &&
			         text.indexOf("LastName") > 0);
        }
        return valid;
    },

    /////////////////////
    // updateContainer()
    /////////////////////
    updateContainer: function (login, enabled, title, tooltip) {

        var el = document.getElementById('loginDiv');
        if (!el) {
            alert("No login window");
        }

        // Update User Login State, Login Button, Container Title Bar, and tooltip
        var userchange = (PublishingWizard.LoginContainer.login != login);
        PublishingWizard.LoginContainer.login = login;
        this.loginButton.setDisabled(!enabled);
        this.setTitle(title);
        if (tooltip) {
            this.tooltip = new Ext.ToolTip({
                target: Ext.get('idLoginContainer'),
                html: tooltip
            });
        } else {
            this.tooltip = null;
        }

        // Fire global event that login info changed.
        //dower publishing todo: rename and catch event.
        if (userchange) {
            this.fireEvent('APP.context.userchange', {
                type: 'APP.context.userchange'
            });
        }
    },

    ///////////////////////
    // onLoginButtonClick
    ///////////////////////
    onLoginButtonClick: function (e) {
        if (location.protocol == "https:") {
            this.openLoginWindow(PublishingWizard.LoginContainer.loginUrl);
        } else {
            this.showLoginUnavailable('Login is not available with protocol ' + location.protocol + ' Use https: instead.');
        }
    },

    /////////////////////////////////////////////////////////////////////////////////////////////////////
    // openLoginWindow(url) : Open login.html page in a new browser Window/Tab
    // This page is protected by Shiboleth SSO and forces the user to sign in to the Identity Provider.
    // Once signed in, the login.html page is then loaded in the browser in a new Tab or Window.
    // When the login.html successfully loads it runs javascript that closes the window.
    //
    // We then detect the closed window and proceed on to determine why :
    //   (1) Successful login completed
    //   (2) User closed the window manually
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    openLoginWindow: function (url) {
        // Create dummy 'dc' argument with unique value to bypass browser cache
        url += (url.indexOf("?") > -1 ? '&' : '?') + "_dc=" + (new Date).getTime();
        Ext.log("LoginContainer: openLoginWindow() url: " + url);

        // Check if login window is already open, create it if not
        this.loginWindow = this.openWindow(this.loginWindow, url);

        try {
            // If window was not successfully created, exception is thrown on .focus() attempt and we assume popups are blocked
            this.loginWindow.focus();
            var count = 0;

            //
            // Window was created: Poll the window every second until:
            // (1) User closed the window without logging in
            // (2) User successfully logged in and window then closed itself
            // (3) 2 minutes expired: we timeout on the login attempt and close the window
            //
            var scope = this;

            // Clear active timer, and start a new one for 2 minutes that activates every second
            if (this.loginTimer && this.loginTimer != null)
                clearInterval(this.loginTimer);

            // Create new timer task to poll login Window status
            this.loginTimer = setInterval(function () {
                Ext.log("LoginContainer: onTimer() loginWindow.closed = " + scope.loginWindow.closed);
                if (++count >= PublishingWizard.LoginContainer.loginTimeoutMins * 60) {
                    scope.loginWindow.close();
                    clearInterval(scope.loginTimer);
                    scope.loginTimer = null;
                    scope.onLoginTimeout();
                } else if (scope.loginWindow.closed) {
                    clearInterval(scope.loginTimer);
                    scope.loginTimer = null;
                    scope.onLoginClosed();
                }
            }, 1000);
        }
        catch (e) {
            scope.showLoginBlocked();
        }
    },

    openWindow: function (win, url) {
        // Check if login window is already created, but closed
        if (win && win != null & !win.closed && win.focus) {
            win.focus();
        } else {
            win = window.open(url, '_blank');
        }
        return win;
    },

    ////////////////////////////////////
    // callbacks from openLoginWindow()
    ////////////////////////////////////	   
    onLoginClosed: function () {
        this.updateContainer(false, false, "...");
        this.polling = false;
        this.getWhoami(10);
    },

    onLoginTimeout: function () {
        Ext.MessageBox.show({
            title: 'Login Timed Out',
            msg: 'Login window timed out after ' + LoginContainer.loginTimeoutMins + ' minutes.  Please try to login again.',
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        // send message to client and server
        var message = "LoginContainer::onLoginTimeout() Login Window time out."
        Ext.log(message);
    },

    showLoginBlocked: function () {
        Ext.MessageBox.show({
            title: 'Login Window Blocked',
            msg: 'Login window may be blocked. Please add exception for ' + location.origin + ' domain and try to login again.',
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.WARNING
        });
        // send message to client and server
        var message = "LoginContainer::showLoginBlocked() ";
        Ext.log(message);
    },

    showLoginUnavailable: function (msg) {
        Ext.MessageBox.show({
            title: 'Login Unavailable',
            msg: msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        // send message to client and server
        var message = 'LoginContainer::showLoginUnavailable(): ' + msg;
        Ext.log(message);
    },

    //////////////////////////
    // onAccountButtonClick()
    //////////////////////////
    onAccountButtonClick: function (e) {
        this.accountWindow = this.openWindow(this.accountWindow, PublishingWizard.LoginContainer.accountUrl);
    }
});
