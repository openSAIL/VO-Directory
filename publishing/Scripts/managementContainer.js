/*
 * File: app/view/ManagementContainer.js
 * Date: Wed Mar 04 2015 20:10:16 GMT-0500 (EST)
 *
 * This file was generated by Ext Designer version 1.2.3.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('PublishingWizard.ManagementContainer', {
    extend: 'PublishingWizard.ui.ManagementContainer',
    renderTo: 'managementDiv',


    initComponent: function () {
        this.callParent(arguments);

        // Hang on to references to open Windows
        this.loginWindow = null;
        this.loginTimer = null;

        // Get Buttons and wire up Event Handlers
        this.managementButton = this.getComponent('itemManagementButton');
        this.managementButton.on('click', this.onManagementButtonClick, this);

        // Perform initial request to see if we are logged in
        this.updateContainer(false);
        this.polling = false;
        this.getWhoami(10);
    },

    statics: {
        whoamiUrl: "../publishing/WhoAmI.asmx/whoami",
        managementUrl: "../publishing/resourcemanagement.html",
        loginTimeoutMins: 2,
        login: false,
    },

    ///////////////
    // getWhoami()
    ///////////////   
    getWhoami: function (delay) {
        this.whoamiTask = new Ext.util.DelayedTask(function () {
            var url = PublishingWizard.ManagementContainer.whoamiUrl;
            Ext.log('ManagementContainer: getWhoami() invoking url: ' + url);
            Ext.Ajax.request({
                url: url,
                method: 'GET',
                success: this.onWhoamiSuccess,
                failure: this.onWhoamiFailure,
                scope: this
            });
        }, this);

        this.whoamiTask.delay(delay);
    },

    onWhoamiSuccess: function (response) {

        // Expecting whoami json object: 
        // {"FirstName":"", "LastName":"", "EZID":"", "Email":""}
        if (this.isValidResponse(response)) {
            var whoami = Ext.decode(response.responseText);
            if (whoami != null && whoami.EZID && whoami.EZID.trim().toLowerCase() != "anonymous") {
                Ext.log('ManagementContainer: onWhoamiSuccess() EZID : ' + whoami.EZID);
                this.updateContainer(true);

                // Successful login. Now poll the server to detect user session expire
                Ext.log('ManagementContainer: onWhoamiSuccess() valid response EZID: ' + whoami.EZID + ' - polling (30)');
                this.polling = true;
                this.getWhoami(1000 * 30);
            } 
        } else {
            // If polling, just quietly submit another poll to see if network/server recovered 
            // Otherwise, this is user initiated login attempt: show Login Failure Dialog and log the error
            if (this.polling) {
                Ext.log('ManagementContainer: onWhoamiSuccess() empty response - polling (30)');
                this.getWhoami(1000 * 30);
            } else {
                this.updateContainer(false);
            }
        }
    },

    onWhoamiFailure: function (response) {
        // If polling, just quietly submit another poll to see if network/server is available
        // Otherwise, this is user initiated login attempt: show Login Failure Dialog and log the error
        if (this.polling) {
            Ext.log('ManagementContainer: onWhoamiFailure() network error - polling (30)');
            this.getWhoami(1000 * 30);
        } else {
            this.updateContainer(false);
        }
    },

    isValidResponse: function (response) {
        var valid = false;
        if (response && response.responseText) {
            var text = response.responseText.trim();
            valid = (text.startsWith("{") &&
			         text.endsWith("}") &&
			         text.indexOf("EZID") > 0 &&
			         text.indexOf("LastName") > 0);
        }
        return valid;
    },

    /////////////////////
    // updateContainer()
    /////////////////////
    updateContainer: function (login) {

        // Update User Login State
        var userchange = (PublishingWizard.ManagementContainer.login != login);
        PublishingWizard.ManagementContainer.login = login;
        this.managementButton.setDisabled(!login);
    },


    ////////////////////////////////////
    // callbacks from openLoginWindow()
    ////////////////////////////////////	   
    onLoginClosed: function () {
        this.updateContainer(false);
        this.polling = false;
        this.getWhoami(10);
    },

    //////////////////////////
    // onHelpButtonClick()
    //////////////////////////
    onManagementButtonClick: function (e) {
        window.open(PublishingWizard.ManagementContainer.managementUrl, "_self")
    }
});
